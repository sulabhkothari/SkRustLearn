Cargo has two main profiles: the dev profile Cargo uses when you run cargo build and the release profile Cargo uses when
you run cargo build --release. The dev profile is defined with good defaults for development, and the release profile
has good defaults for release builds.
$ cargo build
    Finished dev [unoptimized + debuginfo] target(s) in 0.0 secs
$ cargo build --release
    Finished release [optimized] target(s) in 0.0 secs

Cargo has default settings for each of the profiles that apply when there aren’t any [profile.*] sections in the
project’s Cargo.toml file. By adding [profile.*] sections for any profile you want to customize, you can override any
subset of the default settings. For example, here are the default values for the opt-level setting for the dev and
release profiles:
[profile.dev]
opt-level = 0

[profile.release]
opt-level = 3

The opt-level setting controls the number of optimizations Rust will apply to your code, with a range of 0 to 3.
Override dev profile optimization level:
[profile.dev]
opt-level = 1


DOC TESTS:
/// Adds one to the number given.
///
/// # Examples
///
/// ```
/// let arg = 5;
/// let answer = my_crate::add_one(arg);
///
/// assert_eq!(6, answer);
/// ```
pub fn add_one(x: i32) -> i32 {
    x + 1
}

We can generate the HTML documentation from this documentation comment by running cargo doc. This command runs the rustdoc
tool distributed with Rust and puts the generated HTML documentation in the target/doc directory.
For convenience, running cargo doc --open will build the HTML for your current crate’s documentation (as well as the
documentation for all of your crate’s dependencies) and open the result in a web browser.

Here are some other sections that crate authors commonly use in their documentation:
 1. Panics: The scenarios in which the function being documented could panic. Callers of the function who don’t want
    their programs to panic should make sure they don’t call the function in these situations.
 2. Errors: If the function returns a Result, describing the kinds of errors that might occur and what conditions might
    cause those errors to be returned can be helpful to callers so they can write code to handle the different kinds of
    errors in different ways.
 3. Safety: If the function is unsafe to call (we discuss unsafety in Chapter 19), there should be a section explaining
    why the function is unsafe and covering the invariants that the function expects callers to uphold.


Adding example code blocks in your documentation comments can help demonstrate how to use your library, and doing so has
an additional bonus: running cargo test will run the code examples in your documentation as tests!

     Doc-tests restaurant

 running 1 test
 test src/lib.rs - add_one (line 163) ... ok

Now if we change either the function or the example so the assert_eq! in the example panics and run cargo test again,
we’ll see that the doc tests catch that the example and the code are out of sync with each other!

Commenting Contained Items

Another style of doc comment, //!, adds documentation to the item that contains the comments rather than adding
documentation to the items following the comments. We typically use these doc comments inside the crate root file
(src/lib.rs by convention) or inside a module to document the crate or the module as a whole.
Filename: src/lib.rs
//! # My Crate
//!
//! `my_crate` is a collection of utilities to make performing certain
//! calculations more convenient.

/// Adds one to the number given.
// --snip--



Exporting a Convenient Public API with pub use:
Creating a useful public API structure is more of an art than a science, and you can iterate to find the API that works
best for your users. Choosing pub use gives you flexibility in how you structure your crate internally and decouples that
internal structure from what you present to your users. Look at some of the code of crates you’ve installed to see if
their internal structure differs from their public API.

In the art crate we can reexport:
pub use self::kinds::PrimaryColor;
pub use self::kinds::SecondaryColor;
pub use self::utils::mix;
The art crate users can still see and use the internal structure from Listing 14-3 as demonstrated in Listing 14-4, or
they can use the more convenient structure in Listing 14-5, as shown in Listing 14-6:
use art::PrimaryColor;
use art::mix;

fn main() {
    // --snip--
}
In cases where there are many nested modules, re-exporting the types at the top level with pub use can make a significant
difference in the experience of people who use the crate.

Setting Up a Crates.io Account:
$ cargo login abcdefghijklmnopqrstuvwxyz012345

Adding Metadata to a New Crate:
Filename: Cargo.toml

[package]
name = "guessing_game"
version = "0.1.0"
authors = ["Your Name <you@example.com>"]
edition = "2018"
description = "A fun game where you guess what number the computer has chosen."
license = "MIT OR Apache-2.0"

[dependencies]
Cargo’s documentation describes other metadata you can specify to ensure others can discover and use your crate more easily.
$cargo publish

When you’ve made changes to your crate and are ready to release a new version, you change the version value specified in
your Cargo.toml file and republish.

Removing Versions from Crates.io with cargo yank:
Although you can’t remove previous versions of a crate, you can prevent any future projects from adding them as a new
dependency. This is useful when a crate version is broken for one reason or another. In such situations, Cargo supports
yanking a crate version.
Yanking a version prevents new projects from starting to depend on that version while allowing all existing projects that
depend on it to continue to download and depend on that version. Essentially, a yank means that all projects with a
Cargo.lock will not break, and any future Cargo.lock files generated will not use the yanked version.
$ cargo yank --vers 1.0.1
By adding --undo to the command, you can also undo a yank and allow projects to start depending on a version again:
$ cargo yank --vers 1.0.1 --undo

CARGO WORKSPACES (Refer to add folder that contains adder and add-one packages):
A workspace is a set of packages that share the same Cargo.lock and output directory.
    We create the Cargo.toml file that will configure the entire workspace. This file won’t have a [package] section or the
metadata we’ve seen in other Cargo.toml files. Instead, it will start with a [workspace] section that will allow us to
add members to the workspace by specifying the path to our binary crate.
    The workspace has one target directory at the top level for the compiled artifacts to be placed into; the adder crate
doesn’t have its own target directory. Even if we were to run cargo build from inside the adder directory, the compiled
artifacts would still end up in add/target rather than add/adder/target. Cargo structures the target directory in a
workspace like this because the crates in a workspace are meant to depend on each other. If each crate had its own target
directory, each crate would have to recompile each of the other crates in the workspace to have the artifacts in its own
target directory. By sharing one target directory, the crates can avoid unnecessary rebuilding.

Filename: adder/Cargo.toml

[dependencies]

add-one = { path = "../add-one" }

Cargo doesn’t assume that crates in a workspace will depend on each other, so we need to be explicit about the dependency
relationships between the crates.

To run the binary crate from the add directory, we need to specify which package in the workspace we want to use by using
the -p argument and the package name with cargo run:
$ cargo run -p adder

Notice that the workspace has only one Cargo.lock file at the top level of the workspace rather than having a Cargo.lock
in each crate’s directory. This ensures that all crates are using the same version of all dependencies. If we add the rand
crate to the adder/Cargo.toml and add-one/Cargo.toml files, Cargo will resolve both of those to one version of rand and
record that in the one Cargo.lock. Making all crates in the workspace use the same dependencies means the crates in the
workspace will always be compatible with each other.
    Building the adder crate will add rand to the list of dependencies for adder in Cargo.lock, but no additional copies
of rand will be downloaded. Cargo has ensured that every crate in the workspace using the rand crate will be using the
same version. Using the same version of rand across the workspace saves space because we won’t have multiple copies and
ensures that the crates in the workspace will be compatible with each other.

Running cargo test in a workspace structured like this one will run the tests for all the crates in the workspace.
We can also run tests for one particular crate in a workspace from the top-level directory by using the -p flag and
specifying the name of the crate we want to test.
$ cargo test -p add-one

If you publish the crates in the workspace to crates.io, each crate in the workspace will need to be published separately.
The cargo publish command does not have an --all flag or a -p flag, so you must change to each crate’s directory and run
cargo publish on each crate in the workspace to publish the crates.

Keeping the crates in a workspace can make coordination between them easier if they are often changed at the same time.

Installing Binaries from Crates.io with cargo install:
All binaries installed with cargo install are stored in the installation root’s bin folder. If you installed Rust using
rustup.rs and don’t have any custom configurations, this directory will be $HOME/.cargo/bin. Ensure that directory is in
your $PATH to be able to run programs you’ve installed with cargo install.
$ cargo install ripgrep
$ ls $HOME/.cargo/bin
 Installed package `ripgrep v12.0.0` (executable `rg`)

Extending Cargo with Custom Commands:
If a binary in your $PATH is named cargo-something, you can run it as if it was a Cargo subcommand by running cargo
something. Custom commands like this are also listed when you run cargo --list. Being able to use cargo install to install
extensions and then run them just like the built-in Cargo tools is a super convenient benefit of Cargo’s design!